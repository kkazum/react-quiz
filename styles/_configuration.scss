@charset "UTF-8";

//____________________________
//色設定
//____________________________


//____________________________
//メディアクエリ
//____________________________
$msp: 'only screen and (max-width:321px)';
$sp: 'only screen and (max-width:480px)';
$tab: 'only screen and (min-width:481px) and (max-width:766px)';
$pc: 'only screen and (min-width:767px)';

//____________________________
//レスポンシブ
//____________________________

// min-widthの変数定義
$breakpoint-min: (
  'sp': 'screen and (min-width: 0px)',
  'tab': 'screen and (min-width: 481px)',
  'pc': 'screen and (min-width: 767px)',
) !default;

// max-widthの変数定義
$breakpoint-max: (
  'sp': 'screen and (max-width: 480px)',
  'tab': 'screen and (max-width: 766px)',
  'pc': 'screen and (max-width: 1280px)',
) !default;

// min-widthのmixin定義
@mixin mq-min($breakpoint: sp) {
  @media #{map-get($breakpoint-min, $breakpoint)} {
    @content;
  }
}

// max-widthのmixin定義
@mixin mq-max($breakpoint: sp) {
  @media #{map-get($breakpoint-max, $breakpoint)} {
    @content;
  }
}

@mixin inner {
  max-width: 1120px;
  width: 100%;
  padding-left: 50px;
  padding-right: 50px;
  margin: 0 auto;
  overflow: hidden;

  @media #{$sp} {
    padding-left: 1.2rem;
    padding-right: 1.2rem;
  }
}

@mixin bgi {
  //毎回変える
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

@mixin resBgi($url) {
  @include bgi;
  background-image: url($url);
  height: 0;
  width: 100%;
  padding-top: 53.1944444%;
}

@mixin flex {
  //毎回変える
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex; //子要素にflex-shrink: 0;がないと良きに計らわれる
  justify-content: space-between;
  flex-wrap: wrap;
}

// 第一引数で基準となる画面幅のフォントサイズ、第二引数で基準となる画面幅を入力
// @function get_vw($size, $viewport: 1366) {
//   $rate: 100 / $viewport;
//   @return $rate * $size * 1vw;
// }

// @mixin fz_vw($font_size) {
//   @media #{$tab} {
//     font-size: get_vw($font_size) * 2;
//     @if $font_size <= 16 {
//       font-size: get_vw($font_size) * 2.5;
//     }
//   }
//   @media #{$sp} {
//     font-size: get_vw($font_size) * 2.5;
//     @if $font_size <= 16 {
//       font-size: get_vw($font_size) * 3.5;
//     }
//   }
// }

@function rem($px, $base: 10) {
  @return $px / $base * 1rem;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

$breakpointList: 374px, 767px, 1023px, 1199px, 1365px;
// $breakpointList : 374px, 599, 767px, 1023px, 1199px;

$breakpoints: (
  xs: 'only screen and (max-width: #{nth($breakpointList,1)})',
  xs-s:
    'only screen and (min-width: #{nth($breakpointList,1)+1}) and (max-width: #{nth($breakpointList,2)})',
  s: 'only screen and (max-width: #{nth($breakpointList,2)})',
  s-m:
    'only screen and (min-width: #{nth($breakpointList,2)+1}) and (max-width: #{nth($breakpointList,3)})',
  m: 'only screen and (max-width: #{nth($breakpointList,3)})',
  m-l:
    'only screen and (min-width: #{nth($breakpointList,3)+1}) and (max-width: #{nth($breakpointList,4)})',
  l: 'only screen and (max-width: #{nth($breakpointList,4)})',
  l-ul:
    'only screen and (min-width: #{nth($breakpointList,4)+1}) and (max-width: #{nth($breakpointList,5)})',
  ul: 'only screen and (max-width: #{nth($breakpointList,5)})',
  d: 'only screen and (min-width: #{nth($breakpointList,5)+1})',
);
@mixin media($breakpoint) {
  @media #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

@function fscalc($fsfrom, $fsto, $vpfrom, $vpto) {
  $viewport_Width_Minimum: $vpfrom;
  $font_Size_Difference: $fsto - $fsfrom;
  $viewport_Width_Difference: strip-unit($vpto) - strip-unit($vpfrom);

  $XX: strip-unit($viewport_Width_Minimum) / 100 * 0.1rem;
  $YY: 100 * $font_Size_Difference / $viewport_Width_Difference;
  $ZZ: $fsfrom / 10 + 0rem;

  @return calc(#{$ZZ} + ((1vw - #{$XX}) * (#{$YY})));
}

@mixin fs($ul, $l, $m, $s, $xs, $min: 10) {
  & {
    @include media(d) {
      & {
        font-size: rem($ul);
      }
    }
    @include media(l-ul) {
      font-size: fscalc(
        $l,
        $ul,
        nth($breakpointList, 4) + 1,
        nth($breakpointList, 5)
      );
    }
    @include media(m-l) {
      font-size: fscalc(
        $m,
        $l,
        nth($breakpointList, 3) + 1,
        nth($breakpointList, 4)
      );
    }
    @include media(s-m) {
      font-size: fscalc(
        $s,
        $m,
        nth($breakpointList, 2) + 1,
        nth($breakpointList, 3)
      );
    }
    @include media(xs-s) {
      font-size: fscalc(
        $xs,
        $s,
        nth($breakpointList, 1) + 1,
        nth($breakpointList, 2)
      );
    }
    @include media(xs) {
      font-size: fscalc($min, $xs, 320, nth($breakpointList, 1));
    }
  }
}

@mixin resfz($ul, $min) {
  $l: ($ul - $min) * (4/5) + $min;
  $m: ($ul - $min) * (3/5) + $min;
  $s: ($ul - $min) * (2/5) + $min;
  $xs: ($ul - $min) * (1/5) + $min;
  @include fs($ul, $l, $m, $s, $xs, $min);
}
